image: docker/compose:1.29.1

services:
  - docker:dind

variables:
  PORT: "${PORT}"
  NODE_ENV: "${NODE_ENV}"
  SECRET_HASH_PASSWORD: "${SECRET_HASH_PASSWORD}"
  REDIS_HOST: "${REDIS_HOST}"
  REDIS_PORT: "${REDIS_PORT}"
  JWT_SECRET: "${JWT_SECRET}"
  GOOGLE_MAILER_CLIENT_ID: "${GOOGLE_MAILER_CLIENT_ID}"
  GOOGLE_MAILER_REFRESH_TOKEN: "${GOOGLE_MAILER_REFRESH_TOKEN}"
  ADMIN_EMAIL_ADDRESS: "${ADMIN_EMAIL_ADDRESS}"
  GOOGLE_DRIVE_REFRESH_TOKEN: "${GOOGLE_DRIVE_REFRESH_TOKEN}"
  GOOGLE_REDIRECT_URI: "${GOOGLE_REDIRECT_URI}"
  MONGODB_URI: "${MONGODB_URI}"
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  ENDPOINT: "${ENDPOINT}"

stages:
  - build
  - test
  - release
  - deploy

before_script:
  - docker version
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - echo "bắt đầu 1 script"
  - echo "MONGODB_URI"
  - echo "${MONGODB_URI}"

# build:
#   stage: build
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:latest || true
#     - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# test:
#   stage: test
#   before_script: #--------> Ở đây ta đã xoá đi đoạn cài docker-compose
#     - docker-compose version
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
#   script:
#     - docker-compose up -d
#     - sleep 15
#     - docker-compose exec -T k10-be npm run test:cov
#   coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
#   artifacts: # Thêm vào phần này
#     paths:
#     - coverage/

# release-tag:
#   variables:
#     GIT_STRATEGY: none
#   stage: release
#   except:
#     - init-express
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME


# release-latest:
#   variables:
#     GIT_STRATEGY: none
#   stage: release
#   only:
#     - init-express
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
#     - docker push $CI_REGISTRY_IMAGE:latest
  
deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  only:
    - init-express
  before_script:
    - apk update && apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    # chạy ssh-agent tương ứng với Gitlab Runner hiện tại
    - eval $(ssh-agent -s)

    # thêm nội dung của biến SSH_PRIVATE_KEY vào agent store
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    
    # tạo folder ~/.ssh
    - mkdir -p ~/.ssh
    
    # Scan lấy SSH Host key cho địa chỉ IP server
    # Được kết quả bao nhiêu thì thêm vào file known_hosts
    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts
    
    # Sửa lại quyền của file known_hosts
    - chmod 644 ~/.ssh/known_hosts
    
    # Thực hiện SSH vào server, login vào Registry, chuyển tới folder project
    # Down project, pull image về, up project và xoá đi image cũ
    
    -  echo "BẮT ĐẦU SSH"
    -  ssh $SSH_USER@$SSH_SERVER_IP
    -  echo "SSH THÀNH CÔNG"
    -  ls
    -  docker-compose down
    -  docker-compose up --pull --remove-orphans
    -  echo "ĐÃ compose up thành công"
    -  docker rmi $(docker images -q --filter "dangling=true")
    -  echo "ĐÃ xóa image thành công"
